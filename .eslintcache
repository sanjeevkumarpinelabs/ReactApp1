[{"D:\\Learnings\\JKT12Dec\\day7_2JanReact\\app1\\src\\App.js":"1","D:\\Learnings\\JKT12Dec\\day7_2JanReact\\app1\\src\\index.js":"2","D:\\Learnings\\JKT12Dec\\day7_2JanReact\\app1\\src\\reportWebVitals.js":"3","D:\\Learnings\\JKT12Dec\\day7_2JanReact\\app1\\src\\components\\userform\\userform.js":"4","D:\\Learnings\\JKT12Dec\\day7_2JanReact\\app1\\src\\backend-service.js":"5"},{"size":891,"mtime":1610939894036,"results":"6","hashOfConfig":"7"},{"size":272,"mtime":1609565497496,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609557490107,"results":"9","hashOfConfig":"7"},{"size":10343,"mtime":1610774572230,"results":"10","hashOfConfig":"7"},{"size":647,"mtime":1610858081177,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jynvj",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Learnings\\JKT12Dec\\day7_2JanReact\\app1\\src\\App.js",[],"D:\\Learnings\\JKT12Dec\\day7_2JanReact\\app1\\src\\index.js",[],"D:\\Learnings\\JKT12Dec\\day7_2JanReact\\app1\\src\\reportWebVitals.js",[],"D:\\Learnings\\JKT12Dec\\day7_2JanReact\\app1\\src\\components\\userform\\userform.js",["23","24","25"],"import React from 'react'\r\nimport './userform.css'\r\nimport {BackendService} from './../../backend-service'\r\n// export function UserForm(props){\r\n//     return (\r\n//         <input placeholder={props.label} style={{backgroundColor: props.color}}/>\r\n//     )\r\n// }\r\nexport class UserForm extends React.Component{\r\n    //roles = [\"Progammer\" , \"Lead\" , \"Manager\"];\r\n    constructor(props){\r\n        super(props);\r\n        console.log(this.props);\r\n        this.state = {\r\n            user :{\r\n                fname:\"Sanjeev\",\r\n                lname:'Kumar',\r\n                salary:5000,\r\n                gender: \"Male\",\r\n               skills:[]\r\n            },\r\n            users: [{fname:\"Ramesh\" , lname:\"Kumar\",salary:10000}, {fname: \"Dinesh\" , lname: \"Sinha\",salary:11000}],\r\n            roles: [],\r\n            sortOrder:true\r\n            \r\n        }\r\n    }\r\n\r\n    //normal function this was undefined.\r\n    //once changed to the arrow function , it started to print name.\r\n    save =  (event) => {\r\n        BackendService.saveUser(this.state.user,(successCallback) =>{\r\n       // this.state.user.id = successCallback.id;\r\n            this.setState({\r\n                users : [...this.state.users,successCallback]\r\n                \r\n              //  users : [...this.state.users,Object.assign({},this.state.user)]\r\n            })\r\n            }).fail((error) => {\r\n                window.alert(\"Somethig went wrong, please retry... !\");\r\n                console.log(\"Failed to post the user data to backend\");\r\n            })\r\n            \r\n        \r\n    }\r\n\r\n    // handleEvent = (event) => {\r\n    //     //const propertyName = event.target.name;\r\n    //     if(this.event.target.type == \"checkbox\") {\r\n    //         this.state.c\r\n    //     }\r\n    //     this.setState({\r\n    //         //property name can not have dots hence angled bracket is a must\r\n    //        // user: {...this.state.user,[event.target.name]: event.target.value}\r\n    //         //propertyName :event.target.value \r\n\r\n    //         user: Object.assign(this.state.user,{[event.target.name]: event.target.value})\r\n    //     });\r\n    //     console.log(`name = ${event.target.name} and the value = ${event.target.value}`)\r\n    // }\r\n\r\n    handleEvent = (event) => {\r\n        if(event.target.type == 'checkbox'){       \r\n            // if(this.state.user.hasOwnProperty(event.target.name) == false){\r\n            //     this.setState({  \r\n            //         user: Object.assign(this.state.user, { [event.target.name]: [] })\r\n            //     });\r\n            // }\r\n            if(event.target.checked){\r\n                //add values here\r\n                this.state.user.skills.push(event.target.value);\r\n            }else{\r\n                //remove basis value       \r\n                let i = -1;\r\n                this.state.user.skills.map( (value, index)=> {\r\n                    if(value == event.target.value){\r\n                        i = index;\r\n                    }\r\n                });\r\n                if(i>-1){\r\n                    this.state.user.skills.splice(i, 1);\r\n                }                \r\n            }            \r\n            this.setState({  \r\n                user: this.state.user\r\n            });           \r\n\r\n        } else{\r\n\r\n                this.setState({\r\n                //property name can not have dots hence angled bracket is a must\r\n            // user: {...this.state.user,[event.target.name]: event.target.value}\r\n                //propertyName :event.target.value \r\n\r\n                user: Object.assign(this.state.user,{[event.target.name]: event.target.value})\r\n            });\r\n\r\n         console.log(`name = ${event.target.name} and the value = ${event.target.value}`)\r\n        }\r\n    }\r\n    deleteUser = (index,userid) => {\r\n\r\n        const bVal = window.confirm(`Do you want to delete the user ${this.state.users[index].fname} ?`);\r\n        console.log(this);\r\n        console.log(index);\r\n        console.log(\"Delete button clicke/pressed !!\");\r\n        console.log(bVal);\r\n        //remove 1 element at the index\r\n        \r\n        if(bVal){\r\n            const promise = BackendService.deleteUser(userid);\r\n            console.log(promise);\r\n            promise.done((response) => {\r\n                this.state.users.splice(index,1);\r\n                //now render using setstate\r\n                this.setState({\r\n                    users: this.state.users\r\n                });\r\n            })\r\n            promise.fail((error) => {\r\n                alert(\"Deletion failed\")\r\n            });\r\n            \r\n        }else{\r\n        console.log(\"User did not confirm\");\r\n     }\r\n    }\r\n    componentDidMount(){\r\n        const promise = BackendService.getUsers();\r\n        promise.done((response) => {\r\n            this.setState({\r\n                users: response\r\n            })\r\n        })\r\n        promise.fail((error) =>{\r\n            alert('Faile to load th data during application load');\r\n            console.log(\"GET: Failed to fetch the data from back end.\")\r\n        })\r\n\r\n\r\n        const promiseRoles = BackendService.getRoles();\r\n        promiseRoles.done((response) => {\r\n            this.setState({\r\n                roles: response\r\n            })\r\n        })\r\n        promiseRoles.fail((error) =>{\r\n            alert('Faile to load the role master');\r\n            console.log(\"GET: Failed to fetch role master.\")\r\n        })\r\n    }\r\n\r\n    sortSalary = (event) => {\r\n        console.log(\"sort Salary\");\r\n        let sortOrder = this.state.sortOrder;\r\n        sortOrder = !sortOrder;\r\n        if(sortOrder){\r\n           \r\n            this.state.users.sort((user1,user2)=>{\r\n            return (user1.salary-user2.salary );\r\n            });\r\n         }else{\r\n            this.state.users.sort((user1,user2)=>{\r\n                return (user2.salary-user1.salary );\r\n                });\r\n         }\r\n        \r\n        this.setState({\r\n            users:this.state.users,\r\n            sortOrder: sortOrder\r\n        })\r\n    }\r\n\r\n    filterName = (event) => {\r\n        const filterPromise = BackendService.getFilteredUsers(event.target.value);\r\n        filterPromise.done((response) => {\r\n            this.setState({\r\n                users: response\r\n            })\r\n        })\r\n        filterPromise.fail((error) =>{\r\n            alert('failed to get the filter data');\r\n        })\r\n    }\r\n    render(){\r\n        const userModel = this.state.user;\r\n        return (\r\n            <div>\r\n                \r\n                <label>\r\n                    First Name:    \r\n                <input value = {userModel.fname} name= \"fname\" onChange = {this.handleEvent}\r\n                placeholder={this.props.label} style={{backgroundColor: this.props.color}}/>\r\n            \r\n                </label>\r\n                <br/> <br/>\r\n                <label>\r\n                    Last Name:\r\n                    <input value = {userModel.lname} name= \"lname\" onChange = {this.handleEvent} \r\n                    placeholder='last name' style={{backgroundColor: this.props.color}}/>\r\n                </label>\r\n                <br/>\r\n\r\n                <br/> <br/>\r\n                <label>\r\n                    Salary:\r\n                    <input value = {userModel.salary} name= \"salary\" onChange = {this.handleEvent} \r\n                    placeholder='Salary' style={{backgroundColor: this.props.color}}/>\r\n                </label>\r\n                <br/>\r\n            \r\n                    <input type='radio' value = 'Male' onChange= {this.handleEvent} name= 'gender' checked=\"True\"/>Male\r\n                    <input type='radio' value = \"Female\" onChange= {this.handleEvent} name= 'gender' />Female\r\n\r\n        \r\n                    {this.state.roles.map((role) => {\r\n                       return  <div>\r\n                            <input type='radio' value = {role} onChange= {this.handleEvent} name ='role'/>\r\n                            {role}\r\n                        </div>\r\n                    })}\r\n\r\n                <input name= \"skills\" onChange= {this.handleEvent} type= 'checkbox' value='JavaScript' />JavaScript\r\n                <input name= \"skills\" onChange= {this.handleEvent} type= 'checkbox' value='React' />React\r\n                <input name= \"skills\" onChange= {this.handleEvent} type= 'checkbox' value='ReactNative' />ReactNative\r\n                <input name= \"skills\" onChange= {this.handleEvent} type= 'checkbox' value='Java' />Java\r\n                <input name= \"skills\" onChange= {this.handleEvent} type= 'checkbox' value='C/C++' />C/C++\r\n\r\n                <br/>\r\n              \r\n\r\n                <button onClick ={this.save}>SaveNew </button>\r\n                <br/> <br/>\r\n                <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>First Name <div><input onChange= {this.filterName}></input></div></th>\r\n                                <th>Last Name</th>\r\n                                <th onClick = {this.sortSalary}> Salary</th>\r\n                                <th>Programmer</th>\r\n                                <th>Skills</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {this.state.users.map((user,index) => {\r\n                               console.log(index);\r\n                               let skillsList = \" \";\r\n                               if(user[\"skills[]\"]){\r\n                                skillsList = user[\"skills[]\"].map((skill) => skill +\",\")\r\n                               }\r\n                              return <tr> \r\n\r\n                                        <td> {user.fname} </td>\r\n                                        <td> {user.lname} </td> \r\n                                        <td> {user.salary} </td> \r\n                                        <td> {user.role} </td>\r\n                                        <td> {skillsList}</td>                                           \r\n                                        <td> <button onClick={this.deleteUser.bind(this,index,user.id)}>Delete</button> </td>\r\n                                        \r\n                                    </tr>\r\n\r\n                               // return <tr>test</tr>;\r\n                           })}\r\n\r\n                        </tbody>\r\n                </table>\r\n            </div>\r\n            )\r\n    }\r\n}","D:\\Learnings\\JKT12Dec\\day7_2JanReact\\app1\\src\\backend-service.js",[],{"ruleId":"26","severity":1,"message":"27","line":63,"column":30,"nodeType":"28","messageId":"29","endLine":63,"endColumn":32},{"ruleId":"30","severity":1,"message":"31","line":75,"column":59,"nodeType":"32","messageId":"33","endLine":75,"endColumn":61},{"ruleId":"26","severity":1,"message":"27","line":76,"column":30,"nodeType":"28","messageId":"29","endLine":76,"endColumn":32},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]